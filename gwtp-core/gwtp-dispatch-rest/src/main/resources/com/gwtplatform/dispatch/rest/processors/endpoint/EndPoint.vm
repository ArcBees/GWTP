package $impl.packageName;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Generated;

import com.gwtplatform.common.shared.UrlUtils;
import com.gwtplatform.dispatch.rest.client.codegen.AbstractRestAction;
import com.gwtplatform.dispatch.rest.client.core.parameters.*;
import com.gwtplatform.dispatch.rest.shared.ContentType;
import com.gwtplatform.dispatch.rest.shared.HttpMethod;

#printImports($imports)

@Generated(value = "$processor.qualifiedName", date = "$processingDate")
public class $impl.parameterizedName extends AbstractRestAction<$endPoint.resultType.parameterizedName> {
    public ${impl.simpleName}(
            UrlUtils urlUtils,
            String defaultDateFormat#appendParameterDefinitions(3 $fields)) {
        super(HttpMethod.$endPoint.verb.name(), "$endPoint.path");

#foreach($param in $paramSnippets)
        addParam($param.code);
#end
#if($endPoint.body.isPresent())
        setBodyParam($endPoint.body.get().name);
#end
    }

    @Override
    public boolean isSecured() {
        return $endPoint.secured;
    }

    @Override
    public String getBodyClass() {
        return #if($endPoint.body.isPresent())"$endPoint.body.get().type.qualifiedParameterizedName"#{else}null#end;
    }

    @Override
    public String getResultClass() {
        return "$endPoint.resultType.qualifiedParameterizedName";
    }

    @Override
    public List<ContentType> getClientProducedContentTypes() {
        List<ContentType> contentTypes = new ArrayList<ContentType>();
#foreach($consume in $endPoint.consumes)
        contentTypes.add(#recreateContentType($consume));
#end

        return contentTypes;
    }

    @Override
    public List<ContentType> getClientConsumedContentTypes() {
        List<ContentType> contentTypes = new ArrayList<ContentType>();
#foreach($produce in $endPoint.produces)
        contentTypes.add(#recreateContentType($produce));
#end

        return contentTypes;
    }
}
