#macro(generateParameters $parameters)
#foreach ($param in $parameters)

            $param.type.getParameterizedQualifiedSourceName() $param.name#commaIfNeeded($parameters)#end
#end
#macro(generateArguments $parameters)
#foreach ($param in $parameters)
$param.name#commaIfNeeded($parameters)#end
#end
#set($serviceInterface = $service.getServiceInterface())
package $package;

#if($injectable)
import javax.inject.Inject;

#end
import com.google.gwt.user.client.rpc.AsyncCallback;
import com.gwtplatform.dispatch.rest.client.AbstractResourceDelegate;
import com.gwtplatform.dispatch.rest.shared.RestAction;
import com.gwtplatform.dispatch.rest.shared.RestDispatch;
import ${service.interfacePackage}.$serviceInterface;

public class $implName extends AbstractResourceDelegate<$serviceInterface> implements $serviceInterface {
    private final $serviceInterface resource;

#if($injectable)
    @Inject
#else
    public
#end
    $implName(
            RestDispatch dispatcher,
            $serviceInterface resource) {
        super(dispatcher);

        this.resource = resource;
    }

    @Override
    protected $serviceInterface asResource() {
        return this;
    }

    @Override
    protected $implName newInstance() {
        return new $implName(dispatcher, resource);
    }

#foreach ($action in $actions)
    #set($methodParams = $action.getCtorParameters())
    #set($methodParams = $methodParams.subList($service.getCtorParameters().size(), $methodParams.size()))
    #set($methodSignature = "#generateParameters($methodParams)")
    #set($actionArguments = "#generateArguments($methodParams)")
    @Override
    public RestAction<$action.resultClass> ${action.methodName}($methodSignature) {
        RestAction<$action.resultClass> action = resource.${action.methodName}($actionArguments);
        execute(action);

        return action;
    }

#end
#foreach ($resource in $resources)
    #set($methodParams = $resource.getCtorParameters())
    #set($methodParams = $methodParams.subList($service.getCtorParameters().size(), $methodParams.size()))
    #set($methodSignature = "#generateParameters($methodParams)")
    #set($serviceArguments = "#generateArguments($methodParams)")
    @Override
    public $resource.serviceInterface ${resource.methodName}($methodSignature) {
        $resource.serviceInterface subResource = resource.${resource.methodName}($serviceArguments);
        ${resource.serviceInterface}ResourceDelegate delegate = new ${resource.serviceInterface}ResourceDelegate(dispatcher, subResource);

        copyFields(delegate);

        return delegate;
    }

#end
}
