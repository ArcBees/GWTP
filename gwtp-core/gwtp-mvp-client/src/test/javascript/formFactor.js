// Generated by CoffeeScript 1.6.3
(function() {
  describe('finding from user agent', function() {
    describe('for a mobile device', function() {
      var userAgent, _i, _len, _ref, _results;
      _ref = window.mobileUserAgents;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        userAgent = _ref[_i];
        _results.push((function(userAgent) {
          return it('should be mobile when userAgent is ' + userAgent, function() {
            return expect(findFormFactorFromUserAgent(userAgent)).toBe('mobile');
          });
        })(userAgent));
      }
      return _results;
    });
    describe('for tablet', function() {
      var userAgent, _i, _len, _ref, _results;
      _ref = window.tabletUserAgents;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        userAgent = _ref[_i];
        _results.push((function(userAgent) {
          var _this = this;
          return it('should be tablet when userAgent is ' + userAgent, function() {
            return expect(findFormFactorFromUserAgent(userAgent)).toBe('tablet');
          });
        })(userAgent));
      }
      return _results;
    });
    return describe('for a desktop computer', function() {
      var userAgent, _i, _len, _ref, _results;
      _ref = window.desktopUserAgents;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        userAgent = _ref[_i];
        _results.push((function(userAgent) {
          var _this = this;
          return it('should be desktop when userAgent is ' + userAgent, function() {
            return expect(findFormFactorFromUserAgent(userAgent)).toBe('desktop');
          });
        })(userAgent));
      }
      return _results;
    });
  });

  describe('finding form factor from query parameter', function() {
    it('should return undefined when the property is not in the url', function() {
      return expect(findFormFactorFromQuery('/testurl#potato=mobile', 'formFactor')).toBe(void 0);
    });
    it('should return undefined when the property is an empty string', function() {
      return expect(findFormFactorFromQuery('/', '')).toBe(void 0);
    });
    it('should return undefined when the property is not provided', function() {
      return expect(findFormFactorFromQuery('/')).toBe(void 0);
    });
    return describe('when a property is specified', function() {
      it('should return the form factor specified by the property', function() {
        return expect(findFormFactorFromQuery('/testurl#aProperty=aValue', 'aProperty')).toBe('aValue');
      });
      it('should return undefined when the value is not defined', function() {
        return expect(findFormFactorFromQuery('testurl#aProperty=', 'aProperty')).toBe(void 0);
      });
      it('should mark the end of the value with the token #', function() {
        return expect(findFormFactorFromQuery('testurl#aProperty=aValue#anotherValue', 'aProperty')).toBe('aValue');
      });
      return it('should mark the end of the value with the token &', function() {
        return expect(findFormFactorFromQuery('testurl#aProperty=aValue&anotherValue', 'aProperty')).toBe('aValue');
      });
    });
  });

  describe('finding form factor', function() {
    var location, navigator;
    it('should return the value from the url if there was one provided', function() {});
    location = {
      href: '/formFactor=mobile'
    };
    expect(findFormFactor('formFactor', location, navigator)).toBe('mobile');
    it('should fallback to user agent if property is not found in URL', function() {});
    location = {
      href: '/someUrl'
    };
    navigator = {
      userAgent: 'mobile'
    };
    return expect(findFormFactor('formFactor', location, navigator)).toBe('mobile');
  });

}).call(this);
