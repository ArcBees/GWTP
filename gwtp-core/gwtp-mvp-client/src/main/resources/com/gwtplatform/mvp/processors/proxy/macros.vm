#macro(printProxyImports $bundle $codeSplit $slotNames $proxyEvents)
import javax.inject.Inject;
#if($bundle && !$bundle.isManualBundle())
import com.gwtplatform.common.client.CodeSplitNamedBundleProvider;
import com.gwtplatform.common.client.NamedProviderBundleCollection;
#elseif($bundle)
import com.google.gwt.inject.client.AsyncProvider;
import com.gwtplatform.common.client.CodeSplitBundleProvider;
#elseif($codeSplit)
import com.google.gwt.inject.client.AsyncProvider;
import com.gwtplatform.common.client.CodeSplitProvider;
#else
import javax.inject.Provider;
import com.gwtplatform.common.client.StandardProvider;
#end
#if(!$proxyEvents.isEmpty())
import com.gwtplatform.mvp.client.proxy.NotifyingAsyncCallback;
#end
#if(!$slotNames.isEmpty())
import com.gwtplatform.mvp.client.proxy.RevealContentHandler;
#end
import com.google.web.bindery.event.shared.EventBus;
import com.gwtplatform.mvp.client.proxy.PlaceManager;
#end

#macro(printProxyBody $typeName $bundle $codeSplit $presenterType $slotNames $proxyEvents)
        @Inject
        ${typeName}(
                EventBus eventBus,
                PlaceManager placeManager,
#if($bundle && !$bundle.isManualBundle())
                NamedProviderBundleCollection providerBundleCollection#elseif($bundle)
                AsyncProvider<$bundle.bundleType.simpleName> bundleProvider#elseif($codeSplit)
                AsyncProvider<$presenterType.simpleName> presenterProvider#else
                Provider<$presenterType.simpleName> presenterProvider#end) {
            bind(placeManager, eventBus);

#if($bundle && !$bundle.isManualBundle())
            presenter = new CodeSplitNamedBundleProvider(
                    providerBundleCollection.getBundle("$bundle.bundleName"),
                    "$presenterType.qualifiedParameterizedName");
#elseif($bundle)
            presenter = new CodeSplitBundleProvider<>(bundleProvider, $bundle.id);
#elseif($codeSplit)
            presenter = new CodeSplitProvider<>(presenterProvider);
#else
            presenter = new StandardProvider<>(presenterProvider);
#end
#if(!$slotNames.isEmpty())
            RevealContentHandler<$presenterType.simpleName> revealContentHandler
                    = new RevealContentHandler<$presenterType.simpleName>(eventBus, this);
#foreach($slotName in $slotNames)
            eventBus.addHandler(${presenterType.simpleName}.$slotName, revealContentHandler);
#end#end
#registerProxyEvents($proxyEvents)
        }
#end

#macro(implementProxyEventHandlers $proxyEvents)#foreach($proxyEvent in $proxyEvents),
                $proxyEvent.handlerType.parameterizedName#end#end

#macro(registerProxyEvents $proxyEvents)#foreach($proxyEvent in $proxyEvents)
        eventBus.addHandler(${proxyEvent.eventType.simpleName}.$proxyEvent.typeAccessor, this);
#end#end

#macro(overrideProxyEventHandlers $presenterType $proxyEvents)#foreach($proxyEvent in $proxyEvents)
    @Override
    public void ${proxyEvent.handlerMethodName}(final $proxyEvent.eventType.parameterizedName event) {
        getPresenter(new NotifyingAsyncCallback<$presenterType.simpleName>(getEventBus()){
            @Override
            public void success($presenterType.simpleName presenter) {
                presenter.${proxyEvent.annotatedMethodName}(event);
            }
        });
    }
#end#end
