package com.gwtplatform.mvp.rebind;

import com.google.gwt.core.ext.GeneratorContext;
import com.google.gwt.core.ext.TreeLogger;
import com.google.gwt.core.ext.UnableToCompleteException;
import com.google.gwt.core.ext.typeinfo.JClassType;
import com.google.gwt.user.rebind.ClassSourceFileComposerFactory;
import com.google.gwt.user.rebind.SourceWriter;
import com.gwtplatform.mvp.client.DelayedBindRegistry;
import com.gwtplatform.mvp.client.annotations.GWTPGinModules;
import com.gwtplatform.mvp.client.proxy.PlaceManager;

import java.io.PrintWriter;

/**
 * Will generate a {@link com.gwtplatform.mvp.client.ApplicationController}. If the user wants his Generator to be
 * generated by GWTP, this Application controller will make sure that the Ginjector is used to trigger the initial
 * revealCurrentPlace() from the place manager.
 */
public class ApplicationControllerGenerator extends AbstractGenerator {
  private static final String CTOR = "public %s() {";
  private static final String DELAYED_BIND = "%s.bind(%s.SINGLETON);";
  private static final String PLACEMANAGER_REVEALCURRENTPLACE = "%s.SINGLETON.get%s().revealCurrentPlace();";

  private final GinjectorGenerator ginjectorGenerator = new GinjectorGenerator();

  private String generatorName = "";

  @Override
  public String generate(TreeLogger treeLogger, GeneratorContext generatorContext, String typeName)
      throws UnableToCompleteException {
    setTypeOracle(generatorContext.getTypeOracle());
    setTreeLogger(treeLogger);
    setTypeClass(getType(typeName));

    PrintWriter printWriter;
    printWriter = tryCreatePrintWriter(generatorContext, "Impl");

    if (printWriter == null) {
      return null;
    }

    generateGenerator(generatorContext);

    ClassSourceFileComposerFactory composer = initComposer();
    SourceWriter sourceWriter = initSourceWriter(composer, generatorContext, printWriter);

    writeConstructor(sourceWriter);

    closeDefinition(generatorContext, printWriter, sourceWriter);

    return getPackageName() + "." + getClassName();
  }

  private void generateGenerator(GeneratorContext generatorContext) throws UnableToCompleteException {
    JClassType ginjector = findGinjector();

    generatorName = ginjectorGenerator.generate(getTreeLogger(), generatorContext, ginjector.getQualifiedSourceName());
  }

  private void writeConstructor(SourceWriter sourceWriter) {
    sourceWriter.println(String.format(CTOR, getClassName()));
    sourceWriter.indent();

    sourceWriter.println(String.format(DELAYED_BIND, DelayedBindRegistry.class.getSimpleName(), generatorName));
    sourceWriter.println();

    sourceWriter.println(String.format(PLACEMANAGER_REVEALCURRENTPLACE, generatorName,
        PlaceManager.class.getSimpleName()));
    sourceWriter.outdent();
    sourceWriter.println("}");
  }

  private JClassType findGinjector() throws UnableToCompleteException {
    for (JClassType type : getTypeOracle().getTypes()) {
      if (type.isAnnotationPresent(GWTPGinModules.class)) {
        return type;
      }
    }

    getTreeLogger().log(TreeLogger.ERROR, "Cannot find ginjector");
    throw new UnableToCompleteException();
  }

  private ClassSourceFileComposerFactory initComposer() {
    ClassSourceFileComposerFactory composer = new ClassSourceFileComposerFactory(getPackageName(), getClassName());
    composer.addImport(getTypeClass().getQualifiedSourceName());
    composer.addImplementedInterface(getTypeClass().getName());

    composer.addImport(DelayedBindRegistry.class.getCanonicalName());

    return composer;
  }

  private SourceWriter initSourceWriter(ClassSourceFileComposerFactory composer, GeneratorContext generatorContext,
      PrintWriter printWriter) {
    return composer.createSourceWriter(generatorContext, printWriter);
  }
}
