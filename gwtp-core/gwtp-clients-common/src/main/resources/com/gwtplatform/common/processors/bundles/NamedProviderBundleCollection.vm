package $impl.packageName;

import java.util.Map;
import java.util.HashMap;

import javax.annotation.Generated;
import javax.inject.Inject;

import com.google.gwt.inject.client.AsyncProvider;
import com.gwtplatform.common.client.NamedProviderBundle;
import com.gwtplatform.common.client.NamedProviderBundleCollection;
#printImports($imports)

@Generated(value = "$processor.qualifiedName", date = "$processingDate")
public class $impl.simpleName implements NamedProviderBundleCollection {
    private final Map<String, AsyncProvider<? extends NamedProviderBundle>> bundles = new HashMap<>();

    @Inject
    ${impl.simpleName}(#foreach($bundle in $bundles.values())

            AsyncProvider<$bundle.simpleName> bundle$foreach.index#commaIfNeeded()#end) {
#foreach($bundleName in $bundles.keySet())
        bundles.put("$bundleName", bundle$foreach.index);
#end
    }

    @Override
    public AsyncProvider<? extends NamedProviderBundle> getBundle(String bundleName) {
        return bundles.get(bundleName);
    }
}
