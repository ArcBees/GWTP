package $impl.packageName;

import javax.annotation.Generated;

import com.google.gwt.inject.client.AbstractGinModule;
import com.google.inject.TypeLiteral;

@Generated("$processor.qualifiedName")
public class $impl.simpleName extends AbstractGinModule {
    @Override
    protected void configure() {
#foreach($subModule in $subModules)
        install(new ${subModule.qualifiedName}());
#end

#foreach ($binding in $bindings)
#set($implementerMethod = 'bind')
#if($binding.implemented.isPresent())
#set($implemented = $binding.implemented.get())
#set($implementerMethod = '        .to')
#if($implemented.isParameterized())
        bind(new TypeLiteral<$implemented.qualifiedParameterizedName>() {})
#else
        bind(${implemented.qualifiedName}.class)
#end
#end
#set($implementer = $binding.implementer)
#if($implementer.isParameterized())
        ${implementerMethod}(new TypeLiteral<$implementer.qualifiedParameterizedName>() {})
#else
        ${implementerMethod}(${implementer.qualifiedName}.class)
#end
#if($binding.isEagerSingleton())
                .asEagerSingleton()
#elseif($binding.scope.isPresent())
                .in(${binding.scope.get().qualifiedName}.class)#end;
#end
    }
}
